# CMAKE : Do not fight with it. (try to) Embrace it
#
# A CMAKE toolchain file for use on cross-compiling development machines
#
# This file was created by AFXGROUP. I, rjd324, have added some comments and minor modifications

###

# To inform CMAKE about the toolchain being used we must do either:
#
# cmake  -DCMAKE_TOOLCHAIN_FILE=/loc/to/cmake.ppc-amigaos
# Or,
# cmake --toolchain=/loc/to/cmake.ppc-amigaos

if (NOT DEFINED CACHE{C_LIB})
  message ( "C_LIB was not defined. Assuming newlib" )
  set (C_LIB newlib CACHE STRING "The C-library implementation")
else ()
  message ( "C_LIB was set to ${C_LIB}")
endif ()

if (NOT DEFINED CACHE{XGCC_BIN})
  #message ("XGCC_BIN was not defined. Assuming /gcc/bin/ is the location containing the CROSS COMPILERS")
#  set (XGCC_BIN /gcc/bin/ CACHE STRING "The bin directory containing the CROSS COMPILERS")

  # RJD: Personal:
  message ("XGCC_BIN was not set. Setting it to: /home/rjd/projects/adtools_be/bin/")
  set (XGCC_BIN /home/rjd/projects/adtools_be/bin/ CACHE STRING "The bin directory containing the CROSS COMPILERS")
endif ()

# Establish our System
SET(CMAKE_SYSTEM_NAME AmigaOS4)
SET(CMAKE_SYSTEM_VERSION 4)
SET(CMAKE_SYSTEM_PROCESSOR "powerpc")
SET(CMAKE_COMMAND /usr/bin/cmake)

SET(AMIGAOS4 1)

SET(XGCC_BIN /home/rjd/projects/adtools_be/bin/)
SET(SDK ${XGCC_BIN}/../ppc-amigaos/SDK/)
SET_PROPERTY(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)

# specify the cross compiler
SET(CMAKE_C_COMPILER   ${XGCC_BIN}ppc-amigaos-gcc)
SET(CMAKE_CXX_COMPILER   ${XGCC_BIN}ppc-amigaos-g++)
SET(CMAKE_CXX_FLAGS "-mcrt=${C_LIB}")
SET(CMAKE_C_FLAGS "-mcrt=${C_LIB}")
SET(CMAKE_LD_FLAGS "-mcrt=${C_LIB} -athread=native -lpthread") # TODO: arguable to add threading options in here!

## don't use-dyn: SET(CMAKE_EXE_LINKER_FLAGS "-mcrt=${C_LIB} -use-dynld -lpthread -Wl,--no-undefined -athread=native")
SET(CMAKE_EXE_LINKER_FLAGS "-mcrt=${C_LIB} -lpthread -Wl,--no-undefined -athread=native")

SET(CMAKE_SHARED_LINKER_FLAGS "-mcrt=${C_LIB} -lpthread -use-dynld -Wl,--no-undefined -athread=native ")
SET(CMAKE_MODULE_LINKER_FLAGS -shared)
SET(CMAKE_SHARED_LINKER_FLAGS -shared)

# Apparently, this variable is to tell CMAKE to use "alternative" roots to find filesystem items with find_package().
SET(CMAKE_FIND_ROOT_PATH  ${SDK}local/${C_LIB}/;${SDK}local/common/)

# search for programs in the build host directories
#
# Probably because we want to use the BUILD machine's PROGRAMS, just not its source files/libraries etc. For example, searching for pkg-config - we want to use the BUILD machine's pkg-config.
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)
# for libraries and headers in the target directories
#
# It makes sense. We only want to search for libraries, include files and packages in our HOST machine; i.e. the SDK machine that we are build for!
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

# when building, don't use the install RPATH already
# (but later on when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

# the RPATH to be used when installing
SET(CMAKE_INSTALL_RPATH "")

ADD_DEFINITIONS("-pipe")
#ADD_DEFINITIONS("-use-dynld")
#SET( EXTRA_LIBS libstdc++.a libgcc_eh.a )
#SET( LIBS ${LIBS} libstdc.a libgcc_eh.a )
SET(CMAKE_C_IMPLICIT_LINK_LIBRARIES "stdc++")
# add imported target
#ADD_LIBRARY(imp_stdc STATIC IMPORTED)
# point the imported target at the real file
#set_property(TARGET imp_stdc PROPERTY
#	IMPORTED_LOCATION /home/${USER}/projects/adtools_be/local/amiga/ppc-amigaos/lib/${C_LIB}/libsdc++.a)

#SET( EXTRA_LIBS libgcc_eh.a )
#SET( LIBS ${LIBS} libgcc_eh.a )
#SET(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc_eh")
# add imported target
#ADD_LIBRARY(imp_gcc_eh STATIC IMPORTED)
# point the imported target at the real file
#set_property(TARGET imp_gcc_eh PROPERTY
#	IMPORTED_LOCATION /home/${USER}/projects/adtools_be/local/amiga/lib/gcc/ppc-amigaos/4.9.1/libgcc_eh.a)

### list(APPEND CMAKE_MODULE_PATH ${SDK}/local/lib)
